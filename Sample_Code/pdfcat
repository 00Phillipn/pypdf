#!/usr/bin/env python
"""
Concatenate pages from pdf files into a single pdf file.

Page ranges refer to the previously-named file.
A file not followed by a page range means all the pages of the file.

PAGE RANGES are like Python slices.
        {page_range_help}
EXAMPLE
    pdfcat -o output.pdf head.pdf content.pdf :6 7: tail.pdf -1
    Concatenate all of head.pdf, all but page seven of content.pdf, 
    and the last page of tail.pdf, producing output.pdf.
"""
# Copyright (c) 2014, Steve Witham <switham_github@mac-guyver.com>.
# All rights reserved. This software is available under a BSD license;
# see https://github.com/mstamy2/PyPDF2/LICENSE

import argparse
from PyPDF2.pagerange import PAGE_RANGE_HELP

def parse_args():
    parser = argparse.ArgumentParser(
        description=__doc__.format(page_range_help=PAGE_RANGE_HELP),
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("args", nargs="+",
                        metavar="filename or page range expression")
    parser.add_argument("-o", "--output", required=True,
                        metavar="output_file")
    parser.add_argument("-q", "--quiet", action="store_true")
    return parser.parse_args()

from sys import argv, stderr, stdout, exit
import re
import traceback
from PyPDF2 import PdfFileMerger, parse_filename_page_ranges


if __name__ == "__main__":
    args = parse_args()
    verbose = not(args.quiet)

    filename_page_ranges = parse_filename_page_ranges(args.args)
    merger = PdfFileMerger()
    input_files = {}
    for (filename, page_range) in filename_page_ranges:
        if verbose:
            print >>stderr, filename, page_range
        if filename not in input_files:
            input_files[filename] = open(filename, "rb")
        merger.append(input_files[filename], pages=page_range)
    for f in input_files.values():
        f.close()
    output = open(args.output, "wb")
    merger.write(output)


